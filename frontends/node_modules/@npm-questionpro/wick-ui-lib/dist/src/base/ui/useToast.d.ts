import { IToastActionElement, IToastProps } from './toast';
type IToasterToast = IToastProps & {
    id: string;
    title?: React.ReactNode;
    description?: React.ReactNode;
    action?: IToastActionElement;
};
declare const _actionTypes: {
    readonly ADD_TOAST: "ADD_TOAST";
    readonly UPDATE_TOAST: "UPDATE_TOAST";
    readonly DISMISS_TOAST: "DISMISS_TOAST";
    readonly REMOVE_TOAST: "REMOVE_TOAST";
};
type IActionType = typeof _actionTypes;
type IAction = {
    type: IActionType['ADD_TOAST'];
    toast: IToasterToast;
} | {
    type: IActionType['UPDATE_TOAST'];
    toast: Partial<IToasterToast>;
} | {
    type: IActionType['DISMISS_TOAST'];
    toastId?: IToasterToast['id'];
} | {
    type: IActionType['REMOVE_TOAST'];
    toastId?: IToasterToast['id'];
};
interface IState {
    toasts: IToasterToast[];
}
export declare const reducer: (state: IState, action: IAction) => IState;
type IToast = Omit<IToasterToast, 'id'>;
declare function toast({ ...props }: IToast): unknown;
declare function useToast(): {
    toasts: IToasterToast[];
    toast: typeof toast;
    dismiss: (toastId?: string) => void;
};
export { toast, useToast };
