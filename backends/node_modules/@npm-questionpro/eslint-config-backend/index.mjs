import esLint from '@eslint/js'
import typescriptParser from '@typescript-eslint/parser'
import tsEslint from 'typescript-eslint'

export default [
  esLint.configs.recommended,
  ...tsEslint.configs.recommended,
  {
    files: ['**/*.ts'],
    languageOptions: {
      ecmaVersion: 2020,
      sourceType: 'module',
      parser: typescriptParser,
    },
    rules: {
      '@typescript-eslint/ban-types': 'off',
      '@typescript-eslint/no-empty-interface': 'off',
      '@typescript-eslint/no-empty-function': 'off',
      '@typescript-eslint/no-non-null-assertion': 'off',
      '@typescript-eslint/explicit-function-return-type': 'error',
      '@typescript-eslint/no-explicit-any': 'error',
      'no-restricted-exports': [
        'error',
        {restrictDefaultExports: {direct: true}},
      ],
      '@typescript-eslint/no-unused-vars': [
        'error',
        {
          argsIgnorePattern: '^_',
          varsIgnorePattern: '^_',
          destructuredArrayIgnorePattern: '^_',
        },
      ],
      '@typescript-eslint/naming-convention': [
        'error',
        {
          selector: 'default',
          format: ['strictCamelCase', 'StrictPascalCase', 'UPPER_CASE'],
          leadingUnderscore: 'allow',
        },
        {
          selector: ['variable', 'function', 'parameter', 'property'],
          format: ['strictCamelCase', 'UPPER_CASE'],
          leadingUnderscore: 'allow',
        },
        {
          selector: ['class'],
          format: ['StrictPascalCase', 'UPPER_CASE'],
          leadingUnderscore: 'allow',
        },
        {
          selector: ['interface', 'typeAlias'],
          format: ['StrictPascalCase'],
          prefix: ['I'],
        },
        {
          selector: 'enum',
          format: ['StrictPascalCase'],
          suffix: ['Enum'],
        },
      ],
      // Disable base camelcase rule (conflicts with @typescript-eslint/naming-convention)
      camelcase: 'off',
    },
  },
]
