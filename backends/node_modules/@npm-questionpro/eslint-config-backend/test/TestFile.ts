class WrongTestFile {
  // function must have a return type
  functionWithoutReturn() {
    return 'function must have a return type'
  }
}

const wrongIDAbbreviation = 'test'

// Interface & type must have prefix 'I'
interface WrongInterfacePrefix {
  test: string
}

type WrongTypePrefix = {test: string}

// Enum name must have a suffix 'Enum'
enum WrongEnumSuffix {
  TEST = 'test',
}

// Correct versions
interface ICorrectTestInterface {
  test: string
}

type ITestType = {test: string}

enum TestEnum {
  TEST = 'test',
}

class CorrectTestFile {
  // function param must start with a lowercase letter
  functionWithoutReturn(InvalidParam: string): string {
    const InvalidVariable = 'test'

    return 'function must have a return type' + InvalidParam + InvalidVariable
  }

  InvalidProperty: string // Property must start with a lowercase letter
}

class invalidClass {
  // Class name must start with a capital letter
}

const correctIdAbbreviation = 'test'

const _underscoredVariablesShouldBeIgnored = 'test'

export default function test(): string {
  return 'test'
}
