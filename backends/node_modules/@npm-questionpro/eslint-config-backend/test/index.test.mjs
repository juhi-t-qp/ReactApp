import {ESLint} from 'eslint'
import config from '../index.mjs'

describe('ESLint Config', () => {
  let eslint

  beforeAll(() => {
    eslint = new ESLint({
      overrideConfigFile: true,
      overrideConfig: config,
    })
  })

  test('should enforce specified rules', async () => {
    const results = await eslint.lintFiles(['./test/TestFile.ts'])
    const messages = results[0].messages

    matchRule(messages, {
      ruleId: '@typescript-eslint/explicit-function-return-type',
      message: 'Missing return type on function.',
    })
    matchRule(messages, {
      ruleId: '@typescript-eslint/naming-convention',
      message: expect.stringContaining(
        'Variable name `wrongIDAbbreviation` must match one of the following formats',
      ),
    })
    matchRule(messages, {
      ruleId: '@typescript-eslint/naming-convention',
      message: expect.stringContaining(
        'Interface name `WrongInterfacePrefix` must have one of the following prefixes',
      ),
    })
    matchRule(messages, {
      ruleId: '@typescript-eslint/naming-convention',
      message: expect.stringContaining(
        'Type Alias name `WrongTypePrefix` must have one of the following prefixes',
      ),
    })
    matchRule(messages, {
      ruleId: '@typescript-eslint/naming-convention',
      message: expect.stringContaining(
        'Enum name `WrongEnumSuffix` must have one of the following suffixes',
      ),
    })
    matchRule(messages, {
      ruleId: '@typescript-eslint/naming-convention',
      message: expect.stringContaining(
        'Variable name `InvalidVariable` must match one of the following formats: strictCamelCase, UPPER_CASE',
      ),
    })
    matchRule(messages, {
      ruleId: '@typescript-eslint/naming-convention',
      message: expect.stringContaining(
        'Class name `invalidClass` must match one of the following formats: StrictPascalCase, UPPER_CASE',
      ),
    })
    matchRule(messages, {
      ruleId: '@typescript-eslint/naming-convention',
      message: expect.stringContaining(
        'Parameter name `InvalidParam` must match one of the following formats: strictCamelCase, UPPER_CASE',
      ),
    })
    matchRule(messages, {
      ruleId: '@typescript-eslint/naming-convention',
      message: expect.stringContaining(
        'Class Property name `InvalidProperty` must match one of the following formats: strictCamelCase, UPPER_CASE',
      ),
    })
    matchRule(messages, {
      ruleId: '@typescript-eslint/no-unused-vars',
      message: expect.stringContaining(
        "'correctIdAbbreviation' is assigned a value but never used. Allowed unused vars must match /^_/u.",
      ),
    })
    matchRule(messages, {
      ruleId: 'no-restricted-exports',
      message: expect.stringContaining("Exporting 'default' is restricted."),
    })

    // variables starting with underscore are allowed
    expect(messages).not.toEqual(
      expect.arrayContaining([
        expect.objectContaining({
          ruleId: '@typescript-eslint/naming-convention',
          message: expect.stringContaining(
            '_underscoredVariablesShouldBeIgnored` must match one of the following formats:',
          ),
        }),
      ]),
    )
  })
})

const matchRule = (messages, expectedRule) => {
  expect(messages).toEqual(
    expect.arrayContaining([expect.objectContaining(expectedRule)]),
  )
}
